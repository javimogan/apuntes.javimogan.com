---
import { type CollectionEntry, getCollection } from "astro:content";
import BlogPost from "../../layouts/BlogPost.astro";
import { render } from "astro:content";
import moment from "moment-timezone";
import PostList from "../../components/PostList.astro";
import ProseLayout from "../../layouts/ProseLayout.astro";

/**
 * Obtiene los artículos y carpetas dentro de un nivel específico.
 * @param {string} [currentPath=""] - Ruta base desde la que se quiere listar archivos.
 * @returns {Array} Lista de artículos o carpetas en el nivel actual.
 */
export async function getPosts(
	currentPath = "",
	showHidden = false,
	sort = true,
	showDrafts = false,
) {
	const posts = await getCollection("blog");
	// Filtrar artículos válidos: sin `draft: true` y publicados
	let filteredPosts = posts.filter(
		(post) =>
			!post.data.draft && moment(post.data.pubDate).isBefore(moment()),
	);
	// Filtrar artículos ocultos si no se desea mostrarlos
	if (!showHidden) {
		filteredPosts = filteredPosts.filter((post) => !post.data.hidden);
	}
	// Filtrar artículos en borrador si no se desea mostrarlos
	if (!showDrafts) {
		filteredPosts = filteredPosts.filter((post) => !post.data.draft);
	}
	// Ordenar por fecha de actualización o publicación
	if (sort) {
		filteredPosts = filteredPosts.sort(
			(a, b) =>
				(b.data.updatedDate ?? b.data.pubDate).valueOf() -
				(a.data.updatedDate ?? a.data.pubDate).valueOf(),
		);
	}

	// Filtrar solo los archivos que están en el nivel actual
	const currentLevelPosts = filteredPosts.filter((post) => {
		const relativePath = post.id.replace(/\\/g, "/"); // Normalizar rutas para compatibilidad
		const segments = relativePath.split("/");

		// Si `currentPath` está vacío, estamos en el nivel raíz (mostramos solo los de nivel superior)
		if (!currentPath) return segments.length === 1;

		// Si `currentPath` está definido, verificamos que los elementos sean solo los del nivel actual
		const normalizedPath = currentPath
			.replace(/\\/g, "/")
			.replace(/\/$/, ""); // Sin barras finales
		return (
			segments.length === normalizedPath.split("/").length + 1 &&
			relativePath.startsWith(normalizedPath)
		);
	});


	return currentLevelPosts;
}



export async function getStaticPaths() {
	
	//const _p = await getPosts();

	return (await getCollection("blog")).map((post) => ({
		params: { slug: post.id },
		props: post,
	}));
}

type Props = CollectionEntry<"blog">;
const post = Astro.props;

// Renderizar el contenido Markdown
const { Content } = await render(post);
const childrenPosts = await getPosts(post.id);
---

<!-- If Content is not empty -->
 {post.body?(
	 <BlogPost {...post.data}>
		 <Content />
		 {
			 childrenPosts.length > 0 && (
				 <article style="margin-top: 4em;">
					 <hr style="margin-bottom: 2em;"/>
					 <PostList posts={childrenPosts} />
				 </article>
			 )
		 }
	 </BlogPost>
 ):(
	<ProseLayout>
		{
			 childrenPosts.length > 0 && (
				 <article style="margin-top: 4em;">
					 <PostList posts={childrenPosts} />
				 </article>
			 )
		 }
	</ProseLayout>
 )}

